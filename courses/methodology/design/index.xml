<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Проектирование информационных систем on Материалы курсов на кафедре Технологии Программирования. ПМ-ПУ</title>
    <link>https://apmath-spbu.github.io/courses/methodology/design/</link>
    <description>Recent content in Проектирование информационных систем on Материалы курсов на кафедре Технологии Программирования. ПМ-ПУ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language><atom:link href="https://apmath-spbu.github.io/courses/methodology/design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Архитектура</title>
      <link>https://apmath-spbu.github.io/courses/methodology/design/00-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apmath-spbu.github.io/courses/methodology/design/00-architecture/</guid>
      <description>Можно назвать два общих варианта трактования термина «архитектура». Первый связан с разделением системы на наиболее крупные составные части; во втором случае имеются в виду некие конструктивные решения, которые после их принятия с трудом поддаются изменению. Также растет понимание того, что существует более одного способа описания архитектуры и степень важности каждого из них меняется в продолжение жизненного цикла системы.
Архитектура — весьма субъективное понятие. В лучшем случае оно отображает общую точку зрения команды разработчиков на результаты проектирования системы.</description>
    </item>
    
    <item>
      <title>Производительность</title>
      <link>https://apmath-spbu.github.io/courses/methodology/design/01-performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apmath-spbu.github.io/courses/methodology/design/01-performance/</guid>
      <description>Многие архитектурные решения напрямую связаны с аспектами производительности (performance) системы. Чтобы говорить о производительности, имеет смысл увидеть работающую систему, измерить ее характеристики и, учитывая полученные результаты, применить строго определенные процедуры оптимизации. Однако некоторые архитектурные решения определяют параметры производительности таким образом, что устранение возможных проблем средствами оптимизации затрудняется. Именно поэтому к принятию таких решений всегда стоит подходить с большой ответственностью.
Здесь приведем несколько рекомендаций по повышению производительности приложений, включая и такую, которая касается минимизации количества удаленных вызовов.</description>
    </item>
    
    <item>
      <title>&#39;Расслоение&#39; системы</title>
      <link>https://apmath-spbu.github.io/courses/methodology/design/02-layering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apmath-spbu.github.io/courses/methodology/design/02-layering/</guid>
      <description>Концепция слоев (layers) — одна из общеупотребительных моделей, используемых разработчиками программного обеспечения для разделения сложных систем на более простые части. В архитектурах компьютерных систем, например, различают слои кода на языке программирования, функций операционной системы, драйверов устройств, наборов инструкций центрального процессора и внутренней логики чипов. В среде сетевого взаимодействия протокол FTP работает на основе протокола TCP, который, в свою очередь, функционирует «поверх» протокола IP, расположенного «над» протоколом Ethernet.
Описывая систему в терминах архитектурных слоев, удобно воспринимать составляющие ее подсистемы в виде «слоеного пирога».</description>
    </item>
    
    <item>
      <title>Развитие модели слоев в корпоративных программных приложениях</title>
      <link>https://apmath-spbu.github.io/courses/methodology/design/03-model-layer-evolution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apmath-spbu.github.io/courses/methodology/design/03-model-layer-evolution/</guid>
      <description>Понятие слоя приобрело очевидную значимость в середине 1990-х годов с появлением систем клиент/сервер (client/server). Это были системы с двумя слоями: клиент нес ответственность за отображение пользовательского интерфейса и выполнение кода приложения, а роль сервера обычно поручалась СУБД. Клиентские приложения создавались с помощью таких инструментальных средств, как Visual Basic, PowerBuilder и Delphi, предоставлявших в распоряжение разработчика все необходимое, включая экранные компоненты, обслуживающие интерфейс SQL: для конструирования окна было достаточно перетащить на рабочую область необходимые управляющие элементы, настроить параметры доступа к базе данных и подключиться к ней, используя таблицы свойств.</description>
    </item>
    
    <item>
      <title>Три основных слоя</title>
      <link>https://apmath-spbu.github.io/courses/methodology/design/04-three-main-layers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apmath-spbu.github.io/courses/methodology/design/04-three-main-layers/</guid>
      <description>В этих лекциях внимание акцентируется на архитектуре с тремя основными слоями: представление (presentation), домен (предметная область, бизнес-логика) (domain) и источник данных (data source). В таблице приведено их краткое описание:
   Слой Функции     Представление Предоставление услуг, отображение данных, обработка событий пользовательского интерфейса (щелчков кнопками мыши и нажатий клавиш), обслуживание запросов HTTP, поддержка функций командной строки и API пакетного выполнения   Домен Бизнес-логика приложения   Источник данных Обращение к базе данных, обмен сообщениями, управление транзакциями и т.</description>
    </item>
    
    <item>
      <title>Где должны функционировать слои</title>
      <link>https://apmath-spbu.github.io/courses/methodology/design/05-where-deploy-layers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apmath-spbu.github.io/courses/methodology/design/05-where-deploy-layers/</guid>
      <description>В большинстве случаев существует только два варианта размещения и выполнения компонентов корпоративных приложений — на персональном компьютере и на сервере. Зачастую самым простым является функционирование кода всех слоев системы на сервере. Это становится возможным, например, при использовании HTML-интерфейса, воспроизводимого Web-обозревателем. Основным преимуществом сосредоточения всех частей приложения в одном месте является то, что при этом максимально упрощаются процедуры исправления ошибок и обновления версий. В этом случае не приходится беспокоиться о внесении соответствующих изменений на всех компьютерах, об их совместимости с другими приложениями и синхронизации с серверными компонентами.</description>
    </item>
    
    <item>
      <title>Организация бизнес-логики</title>
      <link>https://apmath-spbu.github.io/courses/methodology/design/06-business-logic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apmath-spbu.github.io/courses/methodology/design/06-business-logic/</guid>
      <description>Рассматривая структуру логики предметной области (или бизнес-логики) приложения, отмечу, что варианты распределения множества предусматриваемых ею функций могут рассматриваться по трем типовым решениям:
 сценарий транзакции (Transaction Script) модель предметной области (Domain Model) модуль таблицы (Table Module)  Cценарий транзакции Простейший подход к описанию бизнес-логики связан с использованием сценария транзакции — процедуры, которая получает на вход информацию от слоя представления, обрабатывает ее, проводя необходимые проверки и вычисления, сохраняет в базе данных и активизирует операции других систем.</description>
    </item>
    
    <item>
      <title>Уровень служб</title>
      <link>https://apmath-spbu.github.io/courses/methodology/design/07-service-layer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apmath-spbu.github.io/courses/methodology/design/07-service-layer/</guid>
      <description>Один из общих подходов к реализации бизнес-логики состоит в расщеплении слоя предметной области на два самостоятельных слоя: «поверх» модели предметной области или модуля таблицы располагается слой служб (Service Layer). Обычно это целесообразно только при использовании модели предметной области или модуля таблицы, поскольку слой домена, включающий лишь сценарий транзакции, не настолько сложен, чтобы заслужить право на создание дополнительного слоя. Логика слоя представления взаимодействует с бизнес-логикой исключительно при посредничестве слоя служб, который действует как API приложения.</description>
    </item>
    
    <item>
      <title>Источник данных</title>
      <link>https://apmath-spbu.github.io/courses/methodology/design/08-data-source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apmath-spbu.github.io/courses/methodology/design/08-data-source/</guid>
      <description>Роль слоя источника данных состоит в том, чтобы обеспечить возможность взаимодействия приложения с различными компонентами инфраструктуры для выполнения необходимых функций. Главная составляющая подобной проблемы связана с поддержкой диалога с базой данных — в большинстве случаев реляционной. Тем не менее на сегодня большую популярность приеобретают и колоночные (и другие объектно-ориентированные) базы данных.
Одной из самых серьезных причин успеха реляционных систем является поддержка ими SQL — наиболее стандартизованного языка коммуникаций с базой данных.</description>
    </item>
    
  </channel>
</rss>
