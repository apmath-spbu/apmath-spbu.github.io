<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Современные методологии разработки программного обеспечения. on Материалы курсов на кафедре Технологии Программирования. ПМ-ПУ</title>
    <link>https://apmath-spbu.github.io/methodology/</link>
    <description>Recent content in Современные методологии разработки программного обеспечения. on Материалы курсов на кафедре Технологии Программирования. ПМ-ПУ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language><atom:link href="https://apmath-spbu.github.io/methodology/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>История</title>
      <link>https://apmath-spbu.github.io/methodology/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apmath-spbu.github.io/methodology/history/</guid>
      <description>Фреймворк методологии разработки программного обеспечения (SDM - Software Developer Methodology) появился только в 1960-х годах. Жизненный цикл разработки системы (SDLC - Software Development Life Cycle) можно рассматривать как старейшую формализованную методологическую основу для построения информационных систем . Основная идея SDLC заключалась в том, чтобы «продолжать разработку информационных систем очень продуманным, структурированным и методичным образом, требуя, чтобы каждый этап жизненного цикла - от зарождения идеи до доставки окончательной системы - выполнялся. выполняется жестко и последовательно «в контексте применяемой структуры.</description>
    </item>
    
    <item>
      <title>Жизненный цикл ПО</title>
      <link>https://apmath-spbu.github.io/methodology/sdlc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apmath-spbu.github.io/methodology/sdlc/</guid>
      <description>Жизненный цикл программного обеспечения (SDLC) – это условная схема, включающая отдельные этапы, которые представляют стадии процесса создания ПО. При этом, на каждом этапе выполняются разные действия.
Цикл разработки предлагает шаблон, использование которого облегчает проектирование, создание и выпуск качественного программного обеспечения. Это методология, определяющая процессы и средства, необходимые для успешного завершения проекта.
Хотя реализация принципов построения модели жизненного цикла для разных компаний может существенно отличаться, существуют стандарты, такие как ISO/IEC 12207, определяющие принятые практики разработки и сопровождения программного обеспечения.</description>
    </item>
    
    <item>
      <title>Модели разработки ПО</title>
      <link>https://apmath-spbu.github.io/methodology/sdm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apmath-spbu.github.io/methodology/sdm/</guid>
      <description>Рассмотрим самые основые — модели разработки ПО (как часть жизненного цикла ПО). При этом сразу подчеркнём, что разработка ПО является лишь частью жизненного цикла ПО, и здесь мы говорим именно о разработке.
Моделей разработки ПО много, но, в общем случае, классическими можно считать каскадную, v-образную, итерационную, инкрементальную, спиральную и гибкую.
Знать и понимать модели разработки ПО необходимо затем, чтобы уже с первых дней работы понимать, что происходит вокруг, что, зачем и почему Вы делаете.</description>
    </item>
    
    <item>
      <title>SCRUM</title>
      <link>https://apmath-spbu.github.io/methodology/scrum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apmath-spbu.github.io/methodology/scrum/</guid>
      <description>Scrum (Скрам) — методология управления проектами, активно применяющаяся при разработке информационных систем для гибкой разработки программного обеспечения. Scrum чётко делает акцент на качественном контроле процесса разработки. Скрам представляет из себя набор принципов, на которых строится процесс разработки, позволяющий в жёстко фиксированные и небольшие по времени итерации, называемые спринтами (sprints), предоставлять конечному пользователю работающее ПО с новыми возможностями, для которых определён наибольший приоритет. При этом строго фиксированная небольшая длительность спринта придаёт процессу разработки предсказуемость и гибкость.</description>
    </item>
    
    <item>
      <title>Конструирование ПО</title>
      <link>https://apmath-spbu.github.io/methodology/constructing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apmath-spbu.github.io/methodology/constructing/</guid>
      <description>Основные тезисы:
Конструирование ПО - крупная чать процесса разработки ПО. Вот такие состовляющие разработки ПО, которые были определены за последние 35 лет:
 определение проблемы выработка требований создание плана конструирования разработка архитектуры ПО, или высокоуровневое проектирование детальное проектирование кодирование и отладка блочное тестирование интеграционное тестирование интеграция тестрование системы сопровождение  Конкретные задачи, связанные с конструированием:
 проверка выполнения условий определение способов последующего тестирования проектирование и написание классов и интерфейсов создание и присвоение имен переменным и именованным константам выбор управляющих структур и организация блоков команд блочное тестирование, интеграционное тестирование, отладка ревью, форматирование, комментирование кода  Результат конструирования - исходный код.</description>
    </item>
    
    <item>
      <title>Качество ПО</title>
      <link>https://apmath-spbu.github.io/methodology/quality/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apmath-spbu.github.io/methodology/quality/</guid>
      <description>Основные тезисы:
Качетсво ПО имеет внешние и внутренние характеристики. К внешним характеристикам относят следующие свойства:
 корректность практичность эффективность надежность целостность адаптируемость правильность живучесть  К внутренним характеристикам можно онтести:
 удобство сопровождения гибкость портируемость возможность повторного использования удобочитаемость тестируемость понятность  Методики повышения каечтсва ПО  Целевые запактеристики качества ПО Явный контроль качества Стратегия тестирования Технические обзоры Внешний аудит  Главный закон контроля качества ПО - повышение качества системы снижает расходы на ее разработку.</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://apmath-spbu.github.io/methodology/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apmath-spbu.github.io/methodology/git/</guid>
      <description>Основные тезисы:
Типы систем контроля версий:
 локальные централизованные распределенные  Централизованные системы контроля версий Распределенные системы контроля версий Git общие команды  clone pull add commit push branch merge cherry-pick tag blame  Материалы  Задачи по бранчеванию в Git - https://learngitbranching.js.org/  </description>
    </item>
    
  </channel>
</rss>
